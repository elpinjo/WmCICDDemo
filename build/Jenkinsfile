pipeline {
  agent {
      node {
        label 'wMBuilder'
      }
  }
  environment {
    JAVA_HOME = "/opt/softwareag/jvm/jvm"
    BUILD_PROPS_LOCATION = "${env.WORKSPACE}/build"
  }
  stages {
    stage('Setup') {
      parallel {
        stage('Print') {
          steps {
            sh '''#!/bin/bash

export VERSION="0.0.0CI"
echo ---------------------------------------------------------------------------
echo Build Information
echo ---------------------------------------------------------------------------
echo "Working on : $JOB_NAME"
echo "Workspace  : $WORKSPACE" 
echo "Revision   : $SVN_REVISION"
echo "Build      : $BUILD_NUMBER"
echo "Deploy to  : $DEPLOY_TO"
echo "Working in : $WORKSPACE"
echo ---------------------------------------------------------------------------
echo "GIT_COMMIT : $GIT_COMMIT" 
echo "GIT_BRANCH : $GIT_BRANCH"
echo ---------------------------------------------------------------------------
'''
            sh '''echo "Clean Microservice Containers"
echo "Clean Build Assets"
rm -rf target
rm -rf jmeter
rm -rf test/test
'''
          }
        }
        stage('Get Version Number') {
          steps {
            echo 'Get Version Number'
            load 'build/versionInput.groovy'
          }
        }
      }
    }
    stage('Checkout & prepare') {
      steps {
        sh '''# created needed directories
        git submodule update --init
        git submodule update --remote
mkdir -p ${WORKSPACE}/target/repo
mkdir -p ${WORKSPACE}/test/reports
        '''
      }
    }
    stage('Build') {
      steps {		
				sh 'cd ${WORKSPACE}/SAPIntegration; /opt/softwareag/common/AssetBuildEnvironment/bin/build.sh'
      }
    }
    stage('Test Assets ') {
      steps {
        sh '''echo "Starting the deployment"
cd /opt/softwareag/IntegrationServer/packages/WmDeployer/bin; ./projectautomatorUnix.sh ${WORKSPACE}/build/SAPIntegration_ProjectAutomator.xml; \
./Deployer.sh --deploy -force -dc ciDC -project SAPIntegration -host localhost -port 5555 -user Administrator -pwd manage
echo "Testing the deployment"
cd ${WORKSPACE}/test
/opt/softwareag/common/lib/ant/bin/ant -f run-composite-runner.xml composite-runner-all-tests -DwebMethods.test.setup.location=${WORKSPACE}/SAPIntegration/packages/Customer
'''
      }
    }
    stage('Deploy') {
      parallel {
        stage('Deploy to Test') {
          steps {
            sh '''echo "Deploying to Test"
cd /opt/softwareag/IntegrationServer/packages/WmDeployer/bin; ./projectautomatorUnix.sh ${WORKSPACE}/build/SAPIntegration_ProjectAutomator.xml; \
./Deployer.sh --deploy -force -dc testDC -project SAPIntegration -host localhost -port 5555 -user Administrator -pwd manage
'''
          }
        }
        stage('Deploy to Production') {
          steps {
            sh '''echo "Deploying to Production"
cd /opt/softwareag/IntegrationServer/packages/WmDeployer/bin; ./projectautomatorUnix.sh ${WORKSPACE}/build/SAPIntegration_ProjectAutomator.xml; \
./Deployer.sh --deploy -force -dc productionDC -project SAPIntegration -host localhost -port 5555 -user Administrator -pwd manage
'''
          }
        }
      }
    }
  }
  post {
    always {
      junit 'test/**/*.xml'
      perfReport(sourceDataFiles: 'jmeter/result.jtl', compareBuildPrevious: true, errorUnstableResponseTimeThreshold: '5000')
      archiveArtifacts(artifacts: 'jmeter/result.*', fingerprint: true)

    }

  }
}